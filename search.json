{"search" : [{
    "url" : "/skills/DBMS_Comp_Found/",
    "title" : "Database Management System (DBMS)",
    "text" : "database management system (dbms) table contents #table name skill classification based data model user numbers distribution prerequisites related software engineering area(s) rationale roles work (related activities artifacts) realworld example/scenario (text graphic audio video) order health care provide scientific nonprofit organization role academia industry cultivating tools supporting selfassessment references designed store managed define retrieve databasename #database (dbms)classification systems can classified several criteria such model distribution all described belowclassification # most popular use today relational model wellknown dbmss like oracle ms sql server db2 mysql support this other traditional models hierarchical models network are still used mainly mainframe platforms however they commonly due their complexity these referred because preceded model recent years newer objectoriented were introduced which information represented form objects programming databases different from databases tableoriented (oodbms) combine capabilities with programming language capabilitiesclassification dbms number users supports singleuser system supports one time multiuser multiple concurrentlyclassification there four main these turn classify dbmscentralized systems centralized stored single site that by too early 1980s many canadian libraries geac 8000 convert manual card catalogues machinereadable catalogue systems each book had barcode field similar those supermarket productsdistributed system distributed actual various sites connected computer networkhomogeneous homogeneous same sites exchange between handled easily example library vendor corporation allows easy sitesheterogeneous heterogeneous might software additional common cataloguing (marc) format record exchangeprerequisites #relational modelbasic functions systemssqlrelated #data query (dql)data controll (dcl)data manipulation (dml)data definition (ddl)rationale #improve sharing securityeffective integrationincrease productivity end userquick decision makingroles #database developmentdata interrogationdatabase maintenanceapplication developmentwork #telecommunication : helps keeps call records monthly bills maintaining balances etcfinance storing about stock sales purchases financial instrumentssales customer products informationrealworld # say everywhere would understatement virtually permeate our lives: online stores providers clubs libraries video beauty salons travel agencies phone companies government agencies fbi ins irs nasa databases very nature usually have specifically cater some special customer needs here examplesorder typical company sells building materials arranged follows: must least customer assigned more addresses contact phones default salesperson who liaison company variety products product price description characteristics orders placed time logically forms line when complete shipped then invoiced invoice shipment populated automatically changed users status : complete shipped invoiced also contains specific (bill lading number boxes dates ) order way than shipment well contain order constraints exist database fields cannot empty only certain types informationhealth provider offices states doctors company doctor takes patients just office others days doctor name address area specialization patient doctors kept (name date birth history appointments prescriptions blood tests diagnoses etc) customers schedule cancel appointments prescription drugs either over using web site restrictions apply see specialist needs approval his/her primary physician; should valid refill left scientific genome research areas molecular cellular biology good example gene catalogs completely sequenced genomes partial genomes maps organism information sequence similarities among known genes organisms interaction networks cell chemical compounds reactionsthis group researchers access information warehousenonprofit antique automobile club pretty simple also typically too members going large need store members&#39; personal interest autos (brand year color condition tied owners (members club) member vehicles vehicle owned member few possibly chairman club assistant secretary last two examples businesscritical don&#39;t implemented expensive enterprise software safely lost case let&#39;s say hardware failure probably wait day before restored backup free database mysql postgresql even nonrelational posgres appropriate another choice access part microsoft office tools; bought want word excel aware &#39;ve got wellrole needed within company maintain strong relationships data brand managers search better mannertools #solarwinds performance analyzeroracle rdbmsibm db2altibasemicrosoft serversap sybase aseteradataadabasmysqlfilemakermicrosoft accessinformixsqlitepostgressqlamazonrdsmongodbrediscouchdbneo4jorientdbcouchbasetoadphpmyadminsql developerseqel prorobomongodbvisualizerhadoop hdfsclouderamariadbinformix dynamic server4d (4th dimension)skill #less experince working projectsreferences #https://wwwringleadcomhttp://wwwedubcacomhttp://etutorialsorg"
  },{
    "url" : "/skills/Debugging/",
    "title" : "Debugging",
    "text" : "debugging table contents #table name skill classification prerequisites technical skills : coginitive character traits related software engineering area(s) rationale roles work (related activities artifacts) types techniques real projects role academia industry cultivating tools supporting selfassessment references #debuggingclassification #technical skillprerequisites # person should posses some qualities good debuggerwhich are spread across cognitive ablities traitstechnical #project knowledgeprogramming language knowledgeframeowork knowledgetool/ide knowledgecoginitive #problem solving abilitymental modelling ability connect dots envision big picturecreative thinkingcharacter #patience persistanceability concetrate keep longer attention spanrelated #software testingsoftware maintenancesoftware integrationsoftware developmentrationale #debugging skillset profound relevance just rather engineer general would flooded with faulty products partially functioning applications context engineering given below main behind se activity :identify cause behaviourfix semanticsyntactical design bugs programthough direct intention also increases one&#39;s familarity hence knowledge about coderoles developer programmer analyst software maintainer application support engineerrelated integrationrationale #identify codework evergreen ubiqutous development obvious sounds been widely researched resulting production bunch help process brief through themtypes #static static performed before program run by examining source code mainly done analyzing set code against ( multiple sets) coding rulesthough intent analogous manual review sca accomplished these days integrated into pipeline eg: gitlab quality checksdynamic debugging dynamic involves time tracing employing like single stepping breakpoints watch points etc idea potentially pause execution certain that variables memory can inspected this helps understand what happening when application running compare own notion happeningsingle stepping execute one instruction make sure each executed correctly method tedious useful verifying step programbreakpoints tell stop executing reaches specific instructionthis technique lets quickly selected sequences get highlevel overview behaviorwatch register location changes equals value doesn’t know where value changed change likely causes errorpostmartum type dump data logs while motive approach locate crash investigate its reason employed identify runtime behaviour environmentmost often variances environment induce &#39;heisenbug&#39;( computer programming jargon unstable bugs) program which could simulated development environmentdebugging # much exercise programmer will have employ different isolate error from rest depending nature ones find most interestingbacktracking start point problem occurred go back see how might happenedbug clustering large number errors being reported group them classes similar bugs) examine only bug class intuition class same cause) therefore fixing automatically fix all other them)hypothesis postulation inspecting test case results forming hypothesis consistent observed followed designing simple refute hypothesis refuted derive another continue sense simplification process: reduces possible hypotheses stepinstrument log information logging printing regarding workflow onto screen move line still control flow parameters codealthough printed effective cases become difficult inspect volume logged becomes huge those automated scripts may needed sift report relevant parts more compact formatusing revision analysis occur evolves keeping under version control using configuration management (such git mercurial subversion) dig project&#39;s history aid work here examples: crashes misbehaves particular analyze last associated ( example git blame command) then reveal that say colleague who implemented forgot handle case alternatively reading versioncontrol changes recent failure witnessed detaildifferential differences between datasets fault lay hands working system failing one34 goal why operation two systems diverges used purpose come their generated files environment traces operation cases must ensure configurations possible apart exhibiting failureeditor tricks powerful text editor ide great data syntax coloring parts rectangular selections regular expressions eliminate boilerplate nonessential columns focus essential elements filedifference them patterns search matchedtext highlightingdebugging #&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; head computing pioneer maurice wilkes famously described his 1949 encounter this: &quot; soon started programming found our surprise wasn&#39;t easy programs right had thought debugging discovered remember exact instant realized part life going spent finding mistakes programs&quot;every unanimously agree thisalthough critical detested among developers programmers prefer writing works than breaking heads &#39;lurking&#39; failure add pain teams evolving debug written even known charge makes diffuclt said &amp;quot; err human&amp;quot; inevitable indispensilbe required developersaa astonishing sounds almost 60 percent goes therefore plethora resources out there helping developers cultivate proper practises guidelines experienced collection stories podcasts world wierdest hardest they ever tackle such important skill few listed below:how better https://carlalexanderca/howdebuggingmakebetterdeveloper/why https://sjinnovationcom/whydebugcode/how things guide non https://willcritchlowcom/howdebugthingsguidenondevelopers46599a2c4a41modern debugging: art needle haystack https://cacmacmorg/magazines/2018/11/232215moderndebugging/fulltext=======although tackle below:e09ca9e37f5fae34e1879a8a7f859d19075069c7role #tools #all major ides eg intellij eclipse etc logging frameworks enable debuggingbrowser devtoolsstatic toolsskill #8references #swebok3debugging techniques"
  },{
    "url" : "/skills/api-testing/",
    "title" : "API Testing",
    "text" : "api testing table contents #table classification skill prerequisites related software engineering area(s) rationale roles work (related activities artifacts) realworld example/scenario (text graphic audio video) role academia industry cultivating tools supporting selfassessment references type that involves application programming interfaces (apis) directly determine they meet expectations functionality reliability performance security part integration performed without guiapi commonly includes rest apis soap web services with json xml message payloads being sent over http httpsclassification #&lt;img src=&quot;https://wwwh2kinfosyscom/blog/wpcontent/uploads/2018/02/softwaretestingclassification1024x607png&quot; alt=&quot;kitten&quot;width=&quot;700&quot; height=&quot;400&quot; /&gt;api itself following practices:unit functionality individual operationsfunctional broader scenarios often using unit tests building blocks endend testsload validating performance under load by reusing functional test casessecurity penetration fuzz well authentication encryption access controlweb ui also cover apis enables teams validate gui items context larger transactionsecurity this what authentication required whether sensitive data encrypted http bothprerequisites #tester should have knowleddge :difference between testingtypes bugs detectsfails handle error conditions gracefullyunused flagsmissing duplicate functionalityreliability issues difficulty connecting getting response from apisecurity issuesmultithreading issuesperformance time very highimproper errors/warning callerincorrect handling valid argument valuesresponse structured correctly (json xml)difference servicessoap stands simple object protocol whereas representational state transfersoap architectural patternsoap uses service expose its client applications while uniform locators components hardware devicesoap needs more bandwidth usage doesn’t need much bandwidthsoap only works formats plain text xml html jsonsoap cannot make use can soapwhen when soaprest used instances:statelessness – statelessness means every request happens complete isolation makes request all information necessary server fulfill request never relies previous requests important would again requestcaching there cache lot requests then perfect solution times clients could same resource multiple times increase number which are server implementing cache most frequent queries results stored intermediate location whenever resource will first check cache resources exist then proceed caching help minimizing amount trips made serversoap instances:stateful operations requirement maintained one another soap take example any online purchasing site these sites normally user add purchased cart cart transferred payment page order purchase feature further processingasynchronous processing subsequent invocation guaranteed level reliability security new standard 12 provides additional features especially comes securityhands expierence such postmanrelated #unit testingapis single endpoint looking set responsesintegration testingintegration form testing center integrations internal thirdparty servicesendend testingendend us flow few different connectionsrationale #api allows tester find earlier development process before been created might allowed through ui crucial exposing potential flaws applicationmost companies microservices nowadays (apis) commands how usedroles #good understanding &amp;amp; knowledge about soaprestclear understating servicesstrong grip automation toolwork # run select method paste url api press send button save requestmethod get post put patch delete get fetches record database post adds put replaces one patch information delete removes databaseapi require inputs perform parameters headers body (json) http headers provide : host: domain port making requestauthorization: credentials request contenttype: format provided request details (this sometimes empty) case your hosted go authorization tab basicauth dropdown list (default noauth) input username password now ready authenticated requests important verify output assertion assertion runner assertions tab therefollow steps assertions:choose typechoose assertion’s conditioninput value checkedvariables useful store values received sent responses variables follow steps:add variablegive name variable better teaminput path body expected other requestresponse codes threedigit describe result vary made common come three categories:200level indicate received understood processed400level client500level some sort errorrealworld #following video give glimpse postmandownload postman tool want useclick prefer pupose nameselect folder where requests create predeclared workspacechoose action dropdown than apiheaders authorization parameters optionalclick see bodyrole #industry major play success testingdeloitte: architecting designing their technology discrete sets digital intended reused “api imperative” strategically deploying platforms both within beyond enterprise(https://www2deloittecom/us/en/insights/focus/techtrends/2018/apiprogramstrategyhtml) global market size grow usd 3843 million 2016 10991 2022 compound annual growth rate (cagr) 1969% 2017 2022 base year considered study forecast period 2017–2022north america hold largest share during period enable businesses across industries monetize external world north forefront adoption offering apisapplications financial institutions right people need protecting wrong people become way business today (application interfaces) indispensable allow things connectivity inspiring innovative developers products improve existing services efficientlytools #some follows:postmankatalon studiosoapuiassertibletricentis toscaapigeejmeterrestassuredapi fortressparasoftapi scienceapiary inspectorhttpmaster expressmockbinping apirest consolesoap sonarunirestwebinjectskill #7/10references #(https://wwwsoftwaretestingmaterialcom/apitesting/)(https://wwwguru99com/apitestinghtml)(https://wwwkataloncom/resourcescenter/blog/apitestingtips/)(https://dzonecom/articles/apitestingautomation101essentialguide)(https://wwwguru99com/comparisonbetweenwebserviceshtml#:~:text=soap objectrest pattern&amp;amp;text=soap xmlcan soap)(https://smartbearcom/solutions/apitesting/)(https://simpleprogrammercom/apitesting/#:~:text= feedback testers)(https://wwwmarketsandmarketscom/marketreports/apitestingmarket227082545html)(https://wwwmulesoftcom/resources/api/apistrategyfinancialservices)(https://enwikipediaorg/)"
  },{
    "url" : "/skills/reverse_engineering/",
    "title" : "Reverse Engineering",
    "text" : "reverse engineering table contents #table name skill classification prerequisites related software area(s) rationale roles work (related activities artifacts) realworld example/scenario (text graphic audio video) role academia industry cultivating tools supporting selfassessment references #reverse engineeringclassification #software maintenanceprerequisites #related #software migrationsoftware testingrationale #roles analystsoftware maintenance specialistwork #data restructuringcode restructuringrealworld #role #tools #netbeanseclipseskill #references #"
  },{
    "url" : "/skills/software-configuration-control/",
    "title" : "Software Configuration Control",
    "text" : "software configuration control table contents #table classification skill prerequisites related engineering area(s) devops quality assurance project management rationale roles participate code reviews collaborate with change board identify changes configure development workflow work (related activities artifacts) realworld example/scenario (text graphic audio video) role academia industry cultivating tools supporting selfassessment references deals various phases development by using disciplined approach management new can incorporated into product this crucial because requirements any point process falls line agile oftenchanges are needed even after delivered client example client might need incorporate payment system their existing web application want improve response time site thereby also playing part maintenance toohaving tool helps process bytracking who made changestracking where happenedtracking what each doesproviding way neededproviding review authorise changesproviding propose changesmaking collaboration within team easierproviding manage build pipelineproviding version controlclassification #software most technical skill includes some aspect management although seems like would soft reality does require lot expertise plan delegate engineer projectprerequisites #exposure ansible chef jenkins jiraknowledge systems gitrelated #devops #bridges gap between operations which buildingtestingdeployment application faster pacesoftware #application must tested continuosly throughout process having traceability ensures that agreed upon assurances metproject #includes such planning managing resources time developers deliver product customersclients stakeholdersrationale #having built your pipeline benefits only assurancewithout there knowing components affected changeversion source code different versions over course developmentvcs help teams independently from other same allow them together develop one final merged common version vcs track entire have freedom experiment revert back earlier without problemsby board approved rejected all pursued constraints budget expertise effortroles #participate #code improving look ways solve problem maintaining consistency coding practices whole easier maintain knowledge transfer understand base they developerscollaborate #change contains group individuals could developers managers kind stakeholders approve reject software development though good idea make particular considered carefully its benefits effort cost schedule resources managed effectively doesn&#39;t mean ideas aren&#39;t encouraged ccb give reasonable explaination why can&#39;t implement when situation become favorable pursue identify #throughout come two forms either enhancement defect software formally proposed approval go ahead implementation change more priority than others organized documented extensively defect classified based severity making traceable decision fix defer abandonconfigure #software becomes complex grows size rise complexity handled properly lead inefficiencies productivity team should flexibility blocking rest teamhaving allows freely merge conflicts any alone wouldn&#39;t sufficient rising high quickly efficiently done integrating testing deployment workflow whenever central repository defects deployed production almost immediately developmenttestingdeployment integrate features rate ever beforework #merge branchesreview pull requestsassign tasks teamsrealworld #build large applications distributed gitrole #tools #gitjiraskill #6 less experience working huge number collaboratorsreferences #distributed vcsgit"
  },{
    "url" : "/skills/software-quality-assurance/",
    "title" : "Software Quality Assurance",
    "text" : "software quality assurance name skill #software assuranceclassification #product assuranceprocess assuranceprerequisites #related engineering area(s) #software configuration managementsoftware testingsoftware maintanencerationale #roles #management reviews evaluate actual project results with respect planstechnical (including inspections walkthrough desk checking) examine workproductsprocess audits sqa process activities make certain that processes used develop install operate maintain conform contracts comply any imposed laws rules regulations are adequate efficient effective their intended purposeproduct product provide evidence products related documentation identified contracts; ensure nonconformances addressedwork (related artifacts) #procurement supplier projectcommercial shelf (cots) installationservice after delivery softwarerealworld example/scenario (text graphic audio video) #role academia industry cultivating #tools supporting #skill selfassessment #references #"
  },{
    "url" : "/skills/ui-design/",
    "title" : "User Interface Design",
    "text" : "user interface design table contents #table name skill classification prerequisites related software engineering area(s) rationale roles work (related activities artifacts) realworld example/scenario (text graphic audio video) role academia industry cultivating tools supporting selfassessment references #user designclassification #software processprerequisites # person should have these skills good ui designer:understanding requirements creative thinking logic reasoning attention detailsprototyping tools software html cssfundamental knowledge about principalsfundamental regarding basic elements such color typography shape theoryunderstanding various architecture models principalsrelated #software testing usability tastinguser experience (user part )rationale # frontend application view which interacts order use software goal make user&#39;s interaction simple efficient possible terms accomplishing goals (usercentred design)roles #ui designerui/ux designerproduct designerfrontend developerwork #graphics designing devices different platformsprototyping actual developed verify reevaluate requirements manifestation flow aspects softwarerealworld #google’s material https://materialio/ build beautiful products fasterbest scenarios follow modern approach https://mediumcom/@tristaljing/26bestinteractiveuidesignexamplesyourinspiration2019c1d8106338f8ui importance new gmail vs old case study https://mediumcom/@madhurihebbal/gmailredesignux5f2d81b62a7arole #academics(course/subjects) provided proper guideline principals standards that followed designfundamental theoretical essential designmodernization interfacedesign by industries behaviour acceptance from general users are reasons continuous chnages trendstools #figmaadobe photoshopsketchadobe xdesktop web browsers applicationsskill #8reason:any can considered successful fulfils its main function efficiently effectively aspect involves satisfaction using very crucial ui break base software creates fewer problems increases involvement perfects functionality strong link between your customers softwarethus given score justified with this importancereferences #swebok3 designuser wikiinteractive exampleshttps://mediumcom/@tristaljing/26bestinteractiveuidesignexamplesyourinspiration2019c1d8106338f8"
  }]}