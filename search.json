{"search" : [{
    "url" : "/skills/DBMS_Comp_Found/",
    "title" : "Database Management System (DBMS)",
    "text" : "database management system (dbms) software designed store managed define retrieve data databasename skill #database (dbms)classification systems can classified based several criteria such model user numbers distribution all described belowclassification model most popular model use today relational model wellknown dbmss like oracle ms sql server db2 mysql support this other traditional models hierarchical models network are still used industry mainly mainframe platforms however they commonly due their complexity these referred because preceded model recent years newer objectoriented were introduced which information represented form objects programming databases different from databases tableoriented (oodbms) combine capabilities with programming language capabilitiesclassification numbers dbms classification number users supports singleuser system supports one time multiuser multiple concurrentlyclassification distributionthere four main distribution these turn classify dbmscentralized systemswith centralized stored single site that by too early 1980s many canadian libraries geac 8000 convert manual card catalogues machinereadable catalogue systems each book had barcode field similar those supermarket productsdistributed system distributed actual various sites connected computer networkhomogeneous systemshomogeneous same sites exchange between handled easily example library vendor corporation allows easy sitesheterogeneous systems heterogeneous might software there additional common cataloguing (marc) format record exchangeprerequisites #relational modelbasic functions systemssqlrelated engineering area(s) #data query (dql)data controll (dcl)data manipulation (dml)data definition (ddl)rationale #improve sharing securityeffective integrationincrease productivity end userquick decision makingroles #database developmentdata interrogationdatabase maintenanceapplication developmentwork related (related activities artifacts) #telecommunication : helps keeps call records monthly bills maintaining balances etcfinance storing about stock sales purchases financial instrumentssales customer products informationrealworld example/scenario (text graphic audio video) #role academia cultivating #data needed access within company maintain strong relationships data brand managers search better mannertools supporting #microsoft servermicrosoft accesssqlitephpmyadminsql developersskill selfassessment ( score (1 – 10) reasons selfassigned score) #references #"
  },{
    "url" : "/skills/Debugging/",
    "title" : "Debugging",
    "text" : "debugging name skill #debuggingclassification #technical skillprerequisites # person should posses some qualities good debuggerwhich are spread across technical skills cognitive ablities character traitstechnical :project knowledgeprogramming language knowledgeframeowork knowledgetool/ide knowledgecoginitive :problem solving abilitymental modelling ability connect dots envision big picturecreative thinkingcharacter traits :patience persistanceability concetrate keep longer attention spanrelated software engineering area(s) #software testingsoftware maintenancesoftware integrationrationale #identify cause faulty behaviourfix semanticsyntactical design bugs programthough direct intention also increases one&#39;s familarity hence knowledge about coderoles #work related (related activities artifacts) #different types :static code review dynamic tracing( single stepping breakpoints watch points)postmartum dump datatechniques:backtrackingbug clusteringhypothesis creation realworld example/scenario (text graphic audio video) #role academia industry cultivating #tools supporting #all major ides eg intellij eclipse etc logging frameworks which enable data debuggingbrowser devtoolsstatic analysis toolsskill selfassessment ( score (1 – 10) reasons selfassigned score) #8references #"
  },{
    "url" : "/skills/reverse_engineering/",
    "title" : "Reverse Engineering",
    "text" : "reverse engineering name skill #reverse engineeringclassification #software maintenanceprerequisites #related software area(s) #software migrationsoftware testingrationale #roles analystsoftware maintenance specialistwork related (related activities artifacts) #data restructuringcode restructuringrealworld example/scenario (text graphic audio video) #role academia industry cultivating #tools supporting #netbeanseclipseskill selfassessment ( score (1 – 10) reasons selfassigned score) #references #"
  },{
    "url" : "/skills/software-configuration-control/",
    "title" : "Software Configuration Control",
    "text" : "software configuration control software deals with management changes various phases development by using disciplined approach change management new can incorporated into product this crucial development because requirements any point process skill falls line agile oftenchanges are needed even after delivered client example client might need incorporate payment system their existing web application want improve response time site thereby also playing part maintenance activities toohaving tool helps process bytracking who made changestracking where happenedtracking what each doesproviding way identify neededproviding review authorise changesproviding propose changesmaking collaboration within team easierproviding manage build pipelineproviding version controlclassification #software most technical skill includes some aspect project management although seems like would soft reality does require lot expertise plan delegate engineer projectprerequisites #exposure tools ansible chef jenkins jiraknowledge systems gitrelated engineering area(s) #devops #bridges gap between operations which buildingtestingdeployment application faster pacesoftware quality assurance #application must tested continuosly throughout process having traceability ensures that agreed upon assurances metproject #includes such planning managing resources time developers deliver product customersclients stakeholdersrationale #having built your pipeline benefits only assurancewithout there knowing components affected changeversion source code different versions over course developmentvcs help teams work independently from other same allow them collaborate together develop one final merged common version vcs track entire have freedom experiment code revert back earlier without problemsby board approved rejected all pursued constraints budget expertise effortroles #participate reviews #code improving look ways solve problem maintaining consistency coding practices whole easier maintain knowledge transfer understand base they participate developerscollaborate board #change contains group individuals could developers managers kind stakeholders approve reject software development though good idea make particular considered carefully its benefits effort cost schedule resources managed effectively doesn&#39;t mean ideas aren&#39;t encouraged ccb give reasonable explaination why can&#39;t implement when situation become favorable pursue identify #throughout come two forms either enhancement defect software formally proposed approval go ahead implementation change more priority than others organized documented extensively defect classified based severity making traceable decision fix defer abandonconfigure workflow #software becomes complex grows size rise complexity handled properly lead inefficiencies productivity team should flexibility blocking rest teamhaving allows freely merge conflicts any alone wouldn&#39;t sufficient rising high quickly efficiently done integrating testing deployment workflow whenever central repository defects deployed production almost immediately developmenttestingdeployment integrate features rate ever beforework related (related artifacts) #merge branchesreview pull requestsassign tasks teamsrealworld example/scenario (text graphic audio video) #build large applications distributed gitrole academia industry cultivating #tools supporting #gitjiraskill selfassessment ( score (1 – 10) reasons selfassigned score) #6 less experience working huge number collaboratorsreferences #distributed vcsgit"
  },{
    "url" : "/skills/software-quality-assurance/",
    "title" : "Software Quality Assurance",
    "text" : "software quality assurance name skill #software assuranceclassification #product assuranceprocess assuranceprerequisites #related engineering area(s) #software configuration managementsoftware testingsoftware maintanencerationale #roles #management reviews evaluate actual project results with respect planstechnical (including inspections walkthrough desk checking) examine workproductsprocess audits sqa process activities make certain that processes used develop install operate maintain conform contracts comply any imposed laws rules regulations are adequate efficient effective their intended purposeproduct product provide evidence products related documentation identified contracts; ensure nonconformances addressedwork (related artifacts) #procurement supplier projectcommercial shelf (cots) installationservice after delivery softwarerealworld example/scenario (text graphic audio video) #role academia industry cultivating #tools supporting #skill selfassessment ( score (1 – 10) reasons selfassigned score) #references #"
  },{
    "url" : "/skills/ui-design/",
    "title" : "User Interface Design",
    "text" : "user interface design name skill #user designclassification #software processprerequisites # person should have these skills good ui designer:understanding requirements creative thinking logic reasoning attention detailsprototyping tools software html cssfundamental knowledge about principalsfundamental regarding basic elements such color typography shape theoryunderstanding various software architecture models principalsrelated engineering area(s) #software testing usability tastinguser experience (user part )rationale # frontend application view which interacts order use software goal make user&#39;s interaction simple efficient possible terms accomplishing goals (usercentred design)roles #ui designerui/ux designerproduct designerfrontend developerwork related (related activities artifacts) #graphics designing devices different platformsprototyping actual developed verify reevaluate requirements manifestation flow aspects softwarerealworld example/scenario (text graphic audio video) #google’s material https://materialio/ build beautiful products fasterbest scenarios follow modern approach https://mediumcom/@tristaljing/26bestinteractiveuidesignexamplesyourinspiration2019c1d8106338f8ui importance new gmail vs old case study https://mediumcom/@madhurihebbal/gmailredesignux5f2d81b62a7arole academia industry cultivating #academics(course/subjects) provided proper guideline principals standards that followed designfundamental theoretical essential designmodernization interfacedesign by industries behaviour acceptance from general users are reasons continuous chnages trendstools supporting #figmaadobe photoshopsketchadobe xdesktop web browsers applicationsskill selfassessment ( score (1 – 10) selfassigned score) #8reason:any can considered successful fulfils its main function efficiently effectively aspect involves satisfaction using very crucial ui break base software creates fewer problems increases involvement perfects functionality strong link between your customers softwarethus given justified with this importancereferences #swebok3 designuser wikiinteractive exampleshttps://mediumcom/@tristaljing/26bestinteractiveuidesignexamplesyourinspiration2019c1d8106338f8"
  },{
    "url" : "/skills/api-testing/",
    "title" : "API Testing",
    "text" : "api testing type software that involves application programming interfaces (apis) directly determine they meet expectations functionality reliability performance security part integration performed without guiapi commonly includes rest apis soap web services with json xml message payloads being sent over http httpsclassification skill #img[src*=&amp;quot;#thumbnail&amp;quot;] {width:150px;height:100px;}&lt;img src=&quot;https://wwwh2kinfosyscom/blog/wpcontent/uploads/2018/02/softwaretestingclassification1024x607png&quot; alt=&quot;kitten&quot;width=&quot;150&quot; height=&quot;100&quot; /&gt;api itself following practices:unit functionality individual operationsfunctional broader scenarios often using unit tests building blocks endend testsload validating performance under load by reusing functional test casessecurity penetration fuzz well authentication encryption access controlweb ui also cover apis enables teams validate gui items context larger transactionsecurity this what authentication required whether sensitive data encrypted http bothprerequisites #tester should have knowleddge :difference between testingtypes bugs detectsfails handle error conditions gracefullyunused flagsmissing duplicate functionalityreliability issues difficulty connecting getting response from apisecurity issuesmultithreading issuesperformance time very highimproper errors/warning callerincorrect handling valid argument valuesresponse structured correctly (json xml)difference servicessoap stands simple object protocol whereas representational state transfersoap architectural patternsoap uses service expose its client applications while uniform locators components hardware devicesoap needs more bandwidth usage doesn’t need much bandwidthsoap only works formats work plain text xml html jsonsoap cannot make use can soapwhen when soaprest used instances:statelessness – statelessness means every request happens complete isolation makes request all information necessary server fulfill request never relies previous requests important would again requestcaching there cache lot requests then perfect solution times clients could same resource multiple times increase number which are server implementing cache most frequent queries results stored intermediate location whenever resource will first check cache resources exist then proceed caching help minimizing amount trips made serversoap instances:stateful operations requirement maintained one another soap take example any online purchasing site these sites normally user add purchased cart cart transferred payment page order purchase feature further processingasynchronous processing subsequent invocation guaranteed level reliability security new standard 12 provides additional features especially comes securityhands expierence tools such postmanrelated engineering area(s) #unit testingapis single endpoint looking set responsesintegration testingintegration form testing center integrations internal thirdparty servicesendend testingendend us flow few different connectionsrationale #api allows tester find earlier development process before been created might allowed through ui crucial exposing potential flaws applicationmost companies microservices nowadays (apis) commands how usedroles #good understanding &amp;amp; knowledge about soaprestclear understating servicesstrong grip automation toolwork related (related activities artifacts) # run select method paste url api press send button save requestmethod get post put patch delete get fetches record database post adds put replaces one patch information delete removes databaseapi require inputs perform parameters headers body (json) http headers provide : host: domain port making requestauthorization: credentials request contenttype: format provided request details (this sometimes empty) case your hosted go authorization tab basicauth dropdown list (default noauth) input username password now ready authenticated requests important verify output assertion assertion runner assertions tab therefollow steps assertions:choose typechoose assertion’s conditioninput value checkedvariables useful store values received sent responses variables follow steps:add variablegive name variable better teaminput path body expected other requestresponse codes threedigit describe result vary made common come three categories:200level indicate received understood processed400level client500level some sort errorrealworld example/scenario (text graphic audio video) #following video give glimpse postmandownload postman tool want useclick prefer pupose nameselect folder where requests create predeclared workspacechhose action dropdown selected her than apiheaders authorization parameters optionalclick see bodyrole academia industry cultivating #tools supporting #skill selfassessment ( score (1 10) reasons selfassigned score) #references #"
  }]}